{
	"info": {
		"_postman_id": "91ac5620-aa7f-4169-9127-624a098e9a7f",
		"name": "Drom",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TC006 (positive)",
			"item": [
				{
					"name": "[C]Adding new announcement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JSONData = pm.response.json();\r",
									"pm.environment.set(\"ID\", JSONData.id)\r",
									"\r",
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "X-Utf-Fields",
								"value": "changeDescription,APIOptions,client_type"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "APIOptions",
									"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}"
								},
								{
									"key": "changeDescription",
									"value": "{\"addingType\":\"\",\"fields\":{\"subject\":\"Продам шины\",\"dirId\":234},\"directoryId\":234}"
								},
								{
									"key": "client_type",
									"value": "v2:adding"
								}
							]
						},
						"url": {
							"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"api",
								"1.0",
								"save",
								"bulletin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[C]Creating fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"price\", Math.ceil(Math.random() * 10000) + 5000);\r",
									"pm.environment.set(\"inSetQuantity\", Math.ceil(Math.random() * 8));\r",
									"pm.environment.set(\"quantity\", Math.ceil(Math.random() * 10));\r",
									"var modelList = [\r",
									"    \"Aichi\", \"Aim-One\", \"Altura\", \"Arcron\", \"Aresrook\", \"Arisun\", \"Armstrong\", \"Assa\", \"Athos\", \"Aushine\", \"Bandvulk\", \"Benchmark\", \"Black Rocket\", \"Bob Jane\", \"Bobcat\", \"Bolex\", \"Broadway\", \"Bull\", \"ChaoYang\"\r",
									"];\r",
									"pm.environment.set(\"model\", modelList[Math.floor(Math.random() * (modelList.length))]);\r",
									"var markingList = [\r",
									"    \"145/70R12\", \"155/70R12\", \"165/70R12\", \"175/70R12\", \"145/70R13\", \"155/70R13\", \"165/70R13\", \"175/70R13\", \"185/70R13\", \"165/70R14\", \"175/70R14\", \"185/70R14\", \"195/70R14\", \"205/70R14\", \"195/70R15\", \"205/70R15\", \"215/70R15\", \"225/70R15\", \"235/70R15\", \"255/70R15\", \"265/70R15\"\r",
									"];\r",
									"pm.environment.set(\"marking\", markingList[Math.floor(Math.random() * (markingList.length))]);\r",
									"var predestinationList = [\"truck\", \"spectech\", \"regular\"];\r",
									"pm.environment.set(\"predestination\", predestinationList[Math.floor(Math.random() * (predestinationList.length))]);\r",
									"pm.environment.set(\"year\", Math.ceil(Math.random() * 20 + 2001));\r",
									"var wheelSeasonList = [\"allseason\", \"summer\", \"winter\", \"AT\", \"MT\"];\r",
									"pm.environment.set(\"wheelSeason\", wheelSeasonList[Math.floor(Math.random() * (wheelSeasonList.length))]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "X-Utf-Fields",
								"value": "changeDescription,APIOptions,client_type"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "APIOptions",
									"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}",
									"type": "text"
								},
								{
									"key": "changeDescription",
									"value": "{\"addingType\":\"bulletin\",\"fields\":{\"text\":\"Продам шины на какую-то машину\",\"price\":[{{price}},\"RUB\"],\"inSetQuantity\":\"{{inSetQuantity}}\",\"quantity\":{{quantity}},\"model\":[\"{{model}}\"],\"marking\":\"{{marking}}\",\"predestination\":\"{{predestination}}\",\"condition\":\"new\",\"wheelTireWear\":\"До 5\",\"year\":\"{{year}}\",\"runFlat\":false,\"wheelSeason\":\"{{wheelSeason}}\",\"goodPresentState\":\"present\"},\"directoryId\":234,\"id\":{{ID}}}",
									"type": "text"
								},
								{
									"key": "client_type",
									"value": "v2:adding",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"api",
								"1.0",
								"save",
								"bulletin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[C]Publication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									"\r",
									"pm.test(\"Announcement published\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Мы бесплатно опубликовали объявление. Предложение появится на сайте в течение нескольких минут\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://baza.drom.ru/bulletin/{{ID}}/draft/publish?from=draft.publish",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"bulletin",
								"{{ID}}",
								"draft",
								"publish"
							],
							"query": [
								{
									"key": "from",
									"value": "draft.publish"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[R]Announcement before modification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const $ = cheerio.load(responseBody);\r",
									"const $form = $('meta[name=description]');\r",
									"const content = $form.attr('content');\r",
									"\r",
									"var price = pm.variables.get(\"price\");\r",
									"if (price > 9999) {\r",
									"    priceFormatted = price.toString().split(\"\");\r",
									"    priceFormatted.splice(2, 0, \" \");\r",
									"    priceFormatted = priceFormatted.join(\"\");\r",
									"} else {\r",
									"    priceFormatted = price.toString().split(\"\");\r",
									"    priceFormatted.splice(1, 0, \" \");\r",
									"    priceFormatted = priceFormatted.join(\"\");\r",
									"};\r",
									"\r",
									"var model = pm.environment.get(\"model\");\r",
									"var marking = pm.environment.get(\"marking\");\r",
									"var diameter = marking.slice(-2);\r",
									"var quantity = pm.environment.get(\"quantity\");\r",
									"var width = marking.slice(0, 3);\r",
									"var wheelTireWear = pm.variables.get(\"wheelTireWear\");\r",
									"var year = pm.variables.get(\"year\");\r",
									"var inSetQuantity = pm.variables.get(\"inSetQuantity\");\r",
									"\r",
									"var wheelSeason = pm.variables.get(\"wheelSeason\");\r",
									"switch (wheelSeason) {\r",
									"  case \"allseason\":\r",
									"    season = \"Всесезонные\";\r",
									"    break;\r",
									"  case \"summer\":\r",
									"    season = \"Летние\";\r",
									"    break;\r",
									"  case \"winter\":\r",
									"    season = \"Зимние\";\r",
									"    break;\r",
									"  case \"AT\":\r",
									"    season = \"Грязь AT\";\r",
									"    break;\r",
									"  default:\r",
									"    season = \"Грязь MT\";\r",
									"};\r",
									"\r",
									"var predestination = pm.variables.get(\"predestination\");\r",
									"switch (predestination) {\r",
									"  case \"truck\":\r",
									"    type = \"Грузовая и LT\";\r",
									"    break;\r",
									"  case \"spectech\":\r",
									"    type = \"Для спецтехники\";\r",
									"    break;\r",
									"  default:\r",
									"    type = \"Обычная\";\r",
									"};\r",
									"\r",
									"pm.test(\"Parameters of the announcement are correct\", function () {\r",
									"    pm.expect(content).to.include(`${priceFormatted}`);\r",
									"    pm.expect(content).to.include(`${model}`);\r",
									"    pm.expect(content).to.include(`${model}`);\r",
									"    pm.expect(content).to.include(`${diameter}`);\r",
									"    pm.expect(content).to.include(`${quantity}`);\r",
									"    pm.expect(content).to.include(`В наличии`);\r",
									"    pm.expect(content).to.include(`${width}`);\r",
									"    pm.expect(content).to.include(`радиальный`);\r",
									"    pm.expect(content).to.include(`${marking}`);\r",
									"    pm.expect(content).to.include(`${season}`);\r",
									"    pm.expect(content).to.include(`До 5`);\r",
									"    pm.expect(content).to.include(`${year}`);\r",
									"    pm.expect(content).to.include(`${type}`);\r",
									"    pm.expect(content).to.include(`${inSetQuantity}`);\r",
									"    pm.expect(content).to.include(`Новый`);\r",
									"    pm.expect(content).to.include(`Продам шины на какую-то машину`);\r",
									"});\r",
									"\r",
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://baza.drom.ru/novosibirsk/wheel/tire/prodam-shiny-{{ID}}.html",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"novosibirsk",
								"wheel",
								"tire",
								"prodam-shiny-{{ID}}.html"
							]
						}
					},
					"response": []
				},
				{
					"name": "[U]Updating announcement",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"price\", Math.ceil(Math.random() * 10000) + 5000);\r",
									"pm.environment.set(\"inSetQuantity\", Math.ceil(Math.random() * 8));\r",
									"pm.environment.set(\"quantity\", Math.ceil(Math.random() * 10));\r",
									"var modelList = [\r",
									"    \"Aichi\", \"Aim-One\", \"Altura\", \"Arcron\", \"Aresrook\", \"Arisun\", \"Armstrong\", \"Assa\", \"Athos\", \"Aushine\", \"Bandvulk\", \"Benchmark\", \"Black Rocket\", \"Bob Jane\", \"Bobcat\", \"Bolex\", \"Broadway\", \"Bull\", \"ChaoYang\"\r",
									"];\r",
									"pm.environment.set(\"model\", modelList[Math.floor(Math.random() * (modelList.length))]);\r",
									"var markingList = [\r",
									"    \"145/70R12\", \"155/70R12\", \"165/70R12\", \"175/70R12\", \"145/70R13\", \"155/70R13\", \"165/70R13\", \"175/70R13\", \"185/70R13\", \"165/70R14\", \"175/70R14\", \"185/70R14\", \"195/70R14\", \"205/70R14\", \"195/70R15\", \"205/70R15\", \"215/70R15\", \"225/70R15\", \"235/70R15\", \"255/70R15\", \"265/70R15\"\r",
									"];\r",
									"pm.environment.set(\"marking\", markingList[Math.floor(Math.random() * (markingList.length))]);\r",
									"var predestinationList = [\"truck\", \"spectech\", \"regular\"];\r",
									"pm.environment.set(\"predestination\", predestinationList[Math.floor(Math.random() * (predestinationList.length))]);\r",
									"pm.environment.set(\"year\", Math.ceil(Math.random() * 20 + 2001));\r",
									"var wheelSeasonList = [\"allseason\", \"summer\", \"winter\", \"AT\", \"MT\"];\r",
									"pm.environment.set(\"wheelSeason\", wheelSeasonList[Math.floor(Math.random() * (wheelSeasonList.length))]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded; charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "X-Utf-Fields",
								"value": "changeDescription,APIOptions,client_type"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "APIOptions",
									"value": "{\"canUsePersistentSettings\":true}"
								},
								{
									"key": "changeDescription",
									"value": "{\"addingType\":\"bulletin\",\"fields\":{\"price\":[{{price}},\"RUB\"],\"inSetQuantity\":\"{{inSetQuantity}}\",\"quantity\":{{quantity}},\"model\":[\"{{model}}\"],\"marking\":\"{{marking}}\",\"predestination\":\"{{predestination}}\",\"condition\":\"used\",\"wheelTireWear\":\"20\",\"year\":\"{{year}}\",\"runFlat\":true,\"wheelSeason\":\"{{wheelSeason}}\",\"goodPresentState\":\"to_order\"},\"directoryId\":234,\"id\":{{ID}}}"
								},
								{
									"key": "client_type",
									"value": "v2:editing"
								}
							]
						},
						"url": {
							"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"api",
								"1.0",
								"save",
								"bulletin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[R]Announcement after modification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const $ = cheerio.load(responseBody);\r",
									"const $form = $('meta[name=description]');\r",
									"const content = $form.attr('content');\r",
									"\r",
									"var price = pm.variables.get(\"price\");\r",
									"if (price > 9999) {\r",
									"    priceFormatted = price.toString().split(\"\");\r",
									"    priceFormatted.splice(2, 0, \" \");\r",
									"    priceFormatted = priceFormatted.join(\"\");\r",
									"} else {\r",
									"    priceFormatted = price.toString().split(\"\");\r",
									"    priceFormatted.splice(1, 0, \" \");\r",
									"    priceFormatted = priceFormatted.join(\"\");\r",
									"};\r",
									"\r",
									"var model = pm.environment.get(\"model\");\r",
									"var marking = pm.environment.get(\"marking\");\r",
									"var diameter = marking.slice(-2);\r",
									"var quantity = pm.environment.get(\"quantity\");\r",
									"var width = marking.slice(0, 3);\r",
									"var wheelTireWear = pm.variables.get(\"wheelTireWear\");\r",
									"var year = pm.variables.get(\"year\");\r",
									"var inSetQuantity = pm.variables.get(\"inSetQuantity\");\r",
									"\r",
									"var wheelSeason = pm.variables.get(\"wheelSeason\");\r",
									"switch (wheelSeason) {\r",
									"  case \"allseason\":\r",
									"    season = \"Всесезонные\";\r",
									"    break;\r",
									"  case \"summer\":\r",
									"    season = \"Летние\";\r",
									"    break;\r",
									"  case \"winter\":\r",
									"    season = \"Зимние\";\r",
									"    break;\r",
									"  case \"AT\":\r",
									"    season = \"Грязь AT\";\r",
									"    break;\r",
									"  default:\r",
									"    season = \"Грязь MT\";\r",
									"};\r",
									"\r",
									"var predestination = pm.variables.get(\"predestination\");\r",
									"switch (predestination) {\r",
									"  case \"truck\":\r",
									"    type = \"Грузовая и LT\";\r",
									"    break;\r",
									"  case \"spectech\":\r",
									"    type = \"Для спецтехники\";\r",
									"    break;\r",
									"  default:\r",
									"    type = \"Обычная\";\r",
									"};\r",
									"\r",
									"pm.test(\"Parameters of the announcement are correct\", function () {\r",
									"    pm.expect(content).to.include(`${priceFormatted}`);\r",
									"    pm.expect(content).to.include(`${model}`);\r",
									"    pm.expect(content).to.include(`${model}`);\r",
									"    pm.expect(content).to.include(`${diameter}`);\r",
									"    pm.expect(content).to.include(`${quantity}`);\r",
									"    pm.expect(content).to.include(`Под заказ`);\r",
									"    pm.expect(content).to.include(`${width}`);\r",
									"    pm.expect(content).to.include(`радиальный`);\r",
									"    pm.expect(content).to.include(`${marking}`);\r",
									"    pm.expect(content).to.include(`${season}`);\r",
									"    pm.expect(content).to.include(`20`);\r",
									"    pm.expect(content).to.include(`${year}`);\r",
									"    pm.expect(content).to.include(`RunFlat`);\r",
									"    pm.expect(content).to.include(`${type}`);\r",
									"    pm.expect(content).to.include(`${inSetQuantity}`);\r",
									"    pm.expect(content).to.include(`Б/у`);\r",
									"    pm.expect(content).to.include(`Продам шины на какую-то машину`);\r",
									"});\r",
									"\r",
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://baza.drom.ru/novosibirsk/wheel/tire/prodam-shiny-{{ID}}.html",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"novosibirsk",
								"wheel",
								"tire",
								"prodam-shiny-{{ID}}.html"
							]
						}
					},
					"response": []
				},
				{
					"name": "[D]Taking uid for delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const $ = cheerio.load(responseBody);\r",
									"const $form = $('input[name=uid]');\r",
									"const uid = $form.attr('value');\r",
									"pm.environment.set(\"uid\", uid);\r",
									"\r",
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains uid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://baza.drom.ru/bulletin/service-configure?ids={{ID}}&applier=deleteBulletin",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"bulletin",
								"service-configure"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ID}}"
								},
								{
									"key": "applier",
									"value": "deleteBulletin"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[D]Deleting announcement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "applier",
									"value": "deleteBulletin"
								},
								{
									"key": "bulletin[{{ID}}]",
									"value": "on"
								},
								{
									"key": "order_id",
									"value": "0"
								},
								{
									"key": "price",
									"value": "0"
								},
								{
									"key": "return_to",
									"value": "https://baza.drom.ru/personal/actual/bulletins"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						},
						"url": {
							"raw": "https://baza.drom.ru/bulletin/service-apply",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"bulletin",
								"service-apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "[D]Deleting deleted announcement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, error 404 expected\"] = false;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Error 404 expected\"] = true;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "applier",
									"value": "deleteBulletin"
								},
								{
									"key": "bulletin[{{ID}}]",
									"value": "on"
								},
								{
									"key": "order_id",
									"value": "0"
								},
								{
									"key": "price",
									"value": "0"
								},
								{
									"key": "return_to",
									"value": "https://baza.drom.ru/personal/actual/bulletins"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						},
						"url": {
							"raw": "https://baza.drom.ru/bulletin/service-apply",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"bulletin",
								"service-apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "[R]Checking after deleting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code === 200) {\r",
									"    tests [\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests [\"Bad request, check response body\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests [\"Forbidden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests [\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 409) {\r",
									"    tests [\"Conflict error\"] = false;\r",
									"} else {\r",
									"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1kb\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"The announcement removed\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Вы удалили объявление\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Не показывается на сайте\")\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Cookie",
								"value": "{{Cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://baza.drom.ru/novosibirsk/wheel/tire/prodam-shiny-{{ID}}.html",
							"protocol": "https",
							"host": [
								"baza",
								"drom",
								"ru"
							],
							"path": [
								"novosibirsk",
								"wheel",
								"tire",
								"prodam-shiny-{{ID}}.html"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "TC007. Price = 0",
					"item": [
						{
							"name": "[C]Adding new announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.clear();\r",
											"var JSONData = pm.response.json();\r",
											"pm.environment.set(\"ID\", JSONData.id)\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"\",\"fields\":{\"subject\":\"Продам шины\",\"dirId\":234},\"directoryId\":234}"
										},
										{
											"key": "client_type",
											"value": "v2:adding"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Creating fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present and correct\", function () {\r",
											"    let priceCantBeZero = \"Цена не может равняться нулю\";\r",
											"    let JSONData = pm.response.json();\r",
											"    let key = Object.keys(JSONData[\"fields\"][1])[12];\r",
											"    let errorValue = JSONData[\"fields\"][1][\"error\"][0];\r",
											"    pm.expect(key).to.eql(\"error\");\r",
											"    pm.expect(errorValue).to.eql(priceCantBeZero);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"inSetQuantity\", Math.ceil(Math.random() * 8));\r",
											"pm.environment.set(\"quantity\", Math.ceil(Math.random() * 10));\r",
											"var modelList = [\r",
											"    \"Aichi\", \"Aim-One\", \"Altura\", \"Arcron\", \"Aresrook\", \"Arisun\", \"Armstrong\", \"Assa\", \"Athos\", \"Aushine\", \"Bandvulk\", \"Benchmark\", \"Black Rocket\", \"Bob Jane\", \"Bobcat\", \"Bolex\", \"Broadway\", \"Bull\", \"ChaoYang\"\r",
											"];\r",
											"pm.environment.set(\"model\", modelList[Math.floor(Math.random() * (modelList.length))]);\r",
											"var markingList = [\r",
											"    \"145/70R12\", \"155/70R12\", \"165/70R12\", \"175/70R12\", \"145/70R13\", \"155/70R13\", \"165/70R13\", \"175/70R13\", \"185/70R13\", \"165/70R14\", \"175/70R14\", \"185/70R14\", \"195/70R14\", \"205/70R14\", \"195/70R15\", \"205/70R15\", \"215/70R15\", \"225/70R15\", \"235/70R15\", \"255/70R15\", \"265/70R15\"\r",
											"];\r",
											"pm.environment.set(\"marking\", markingList[Math.floor(Math.random() * (markingList.length))]);\r",
											"var predestinationList = [\"truck\", \"spectech\", \"regular\"];\r",
											"pm.environment.set(\"predestination\", predestinationList[Math.floor(Math.random() * (predestinationList.length))]);\r",
											"pm.environment.set(\"year\", Math.ceil(Math.random() * 20 + 2001));\r",
											"var wheelSeasonList = [\"allseason\", \"summer\", \"winter\", \"AT\", \"MT\"];\r",
											"pm.environment.set(\"wheelSeason\", wheelSeasonList[Math.floor(Math.random() * (wheelSeasonList.length))]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}",
											"type": "text"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"bulletin\",\"fields\":{\"text\":\"Продам шины на какую-то машину\",\"price\":[0,\"RUB\"],\"inSetQuantity\":\"{{inSetQuantity}}\",\"quantity\":{{quantity}},\"model\":[\"{{model}}\"],\"marking\":\"{{marking}}\",\"predestination\":\"{{predestination}}\",\"condition\":\"new\",\"wheelTireWear\":\"До 5\",\"year\":\"{{year}}\",\"runFlat\":false,\"wheelSeason\":\"{{wheelSeason}}\",\"goodPresentState\":\"present\"},\"directoryId\":234,\"id\":{{ID}}}",
											"type": "text"
										},
										{
											"key": "client_type",
											"value": "v2:adding",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Publication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"The announcement has not been published. It's expected\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"Мы бесплатно опубликовали объявление. Предложение появится на сайте в течение нескольких минут\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Объявление содержит ошибки\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/{{ID}}/draft/publish?from=draft.publish",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"{{ID}}",
										"draft",
										"publish"
									],
									"query": [
										{
											"key": "from",
											"value": "draft.publish"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R]Announcement  price error check",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Ошибка в поле \"Цена\"');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://baza.drom.ru/novosibirsk/wheel/tire/prodam-shiny-{{ID}}.html",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"novosibirsk",
										"wheel",
										"tire",
										"prodam-shiny-{{ID}}.html"
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Taking uid for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const $ = cheerio.load(responseBody);\r",
											"const $form = $('input[name=uid]');\r",
											"const uid = $form.attr('value');\r",
											"pm.environment.set(\"uid\", uid);\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-configure?ids={{ID}}&applier=deleteBulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-configure"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ID}}"
										},
										{
											"key": "applier",
											"value": "deleteBulletin"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Deleting announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "applier",
											"value": "deleteBulletin"
										},
										{
											"key": "bulletin[{{ID}}]",
											"value": "on"
										},
										{
											"key": "order_id",
											"value": "0"
										},
										{
											"key": "price",
											"value": "0"
										},
										{
											"key": "return_to",
											"value": "https://baza.drom.ru/personal/actual/bulletins"
										},
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-apply",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-apply"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC008. Price = -1",
					"item": [
						{
							"name": "[C]Adding new announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.clear();\r",
											"var JSONData = pm.response.json();\r",
											"pm.environment.set(\"ID\", JSONData.id)\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"\",\"fields\":{\"subject\":\"Продам шины\",\"dirId\":234},\"directoryId\":234}"
										},
										{
											"key": "client_type",
											"value": "v2:adding"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Creating fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present and correct\", function () {\r",
											"    let priceCantBeNegative = \"Цена не может быть отрицательной\";\r",
											"    let JSONData = pm.response.json();\r",
											"    let key = Object.keys(JSONData[\"fields\"][1])[12];\r",
											"    let errorValue = JSONData[\"fields\"][1][\"error\"][0];\r",
											"    pm.expect(key).to.eql(\"error\");\r",
											"    pm.expect(errorValue).to.eql(priceCantBeNegative);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"inSetQuantity\", Math.ceil(Math.random() * 8));\r",
											"pm.environment.set(\"quantity\", Math.ceil(Math.random() * 10));\r",
											"var modelList = [\r",
											"    \"Aichi\", \"Aim-One\", \"Altura\", \"Arcron\", \"Aresrook\", \"Arisun\", \"Armstrong\", \"Assa\", \"Athos\", \"Aushine\", \"Bandvulk\", \"Benchmark\", \"Black Rocket\", \"Bob Jane\", \"Bobcat\", \"Bolex\", \"Broadway\", \"Bull\", \"ChaoYang\"\r",
											"];\r",
											"pm.environment.set(\"model\", modelList[Math.floor(Math.random() * (modelList.length))]);\r",
											"var markingList = [\r",
											"    \"145/70R12\", \"155/70R12\", \"165/70R12\", \"175/70R12\", \"145/70R13\", \"155/70R13\", \"165/70R13\", \"175/70R13\", \"185/70R13\", \"165/70R14\", \"175/70R14\", \"185/70R14\", \"195/70R14\", \"205/70R14\", \"195/70R15\", \"205/70R15\", \"215/70R15\", \"225/70R15\", \"235/70R15\", \"255/70R15\", \"265/70R15\"\r",
											"];\r",
											"pm.environment.set(\"marking\", markingList[Math.floor(Math.random() * (markingList.length))]);\r",
											"var predestinationList = [\"truck\", \"spectech\", \"regular\"];\r",
											"pm.environment.set(\"predestination\", predestinationList[Math.floor(Math.random() * (predestinationList.length))]);\r",
											"pm.environment.set(\"year\", Math.ceil(Math.random() * 20 + 2001));\r",
											"var wheelSeasonList = [\"allseason\", \"summer\", \"winter\", \"AT\", \"MT\"];\r",
											"pm.environment.set(\"wheelSeason\", wheelSeasonList[Math.floor(Math.random() * (wheelSeasonList.length))]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}",
											"type": "text"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"bulletin\",\"fields\":{\"text\":\"Продам шины на какую-то машину\",\"price\":[-1,\"RUB\"],\"inSetQuantity\":\"{{inSetQuantity}}\",\"quantity\":{{quantity}},\"model\":[\"{{model}}\"],\"marking\":\"{{marking}}\",\"predestination\":\"{{predestination}}\",\"condition\":\"new\",\"wheelTireWear\":\"До 5\",\"year\":\"{{year}}\",\"runFlat\":false,\"wheelSeason\":\"{{wheelSeason}}\",\"goodPresentState\":\"present\"},\"directoryId\":234,\"id\":{{ID}}}",
											"type": "text"
										},
										{
											"key": "client_type",
											"value": "v2:adding",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Publication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"The announcement has not been published. It's expected\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"Мы бесплатно опубликовали объявление. Предложение появится на сайте в течение нескольких минут\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Объявление содержит ошибки\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/{{ID}}/draft/publish?from=draft.publish",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"{{ID}}",
										"draft",
										"publish"
									],
									"query": [
										{
											"key": "from",
											"value": "draft.publish"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R]Announcement  price error check",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Ошибка в поле \"Цена\"');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://baza.drom.ru/novosibirsk/wheel/tire/prodam-shiny-{{ID}}.html",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"novosibirsk",
										"wheel",
										"tire",
										"prodam-shiny-{{ID}}.html"
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Taking uid for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const $ = cheerio.load(responseBody);\r",
											"const $form = $('input[name=uid]');\r",
											"const uid = $form.attr('value');\r",
											"pm.environment.set(\"uid\", uid);\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-configure?ids={{ID}}&applier=deleteBulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-configure"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ID}}"
										},
										{
											"key": "applier",
											"value": "deleteBulletin"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Deleting announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "applier",
											"value": "deleteBulletin"
										},
										{
											"key": "bulletin[{{ID}}]",
											"value": "on"
										},
										{
											"key": "order_id",
											"value": "0"
										},
										{
											"key": "price",
											"value": "0"
										},
										{
											"key": "return_to",
											"value": "https://baza.drom.ru/personal/actual/bulletins"
										},
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-apply",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-apply"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC009. Price = #$(,+@",
					"item": [
						{
							"name": "[C]Adding new announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.clear();\r",
											"var JSONData = pm.response.json();\r",
											"pm.environment.set(\"ID\", JSONData.id)\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"\",\"fields\":{\"subject\":\"Продам шины\",\"dirId\":234},\"directoryId\":234}"
										},
										{
											"key": "client_type",
											"value": "v2:adding"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Creating fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = false;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 406) {\r",
											"    tests [\"Bad json\"] = true;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"inSetQuantity\", Math.ceil(Math.random() * 8));\r",
											"pm.environment.set(\"quantity\", Math.ceil(Math.random() * 10));\r",
											"var modelList = [\r",
											"    \"Aichi\", \"Aim-One\", \"Altura\", \"Arcron\", \"Aresrook\", \"Arisun\", \"Armstrong\", \"Assa\", \"Athos\", \"Aushine\", \"Bandvulk\", \"Benchmark\", \"Black Rocket\", \"Bob Jane\", \"Bobcat\", \"Bolex\", \"Broadway\", \"Bull\", \"ChaoYang\"\r",
											"];\r",
											"pm.environment.set(\"model\", modelList[Math.floor(Math.random() * (modelList.length))]);\r",
											"var markingList = [\r",
											"    \"145/70R12\", \"155/70R12\", \"165/70R12\", \"175/70R12\", \"145/70R13\", \"155/70R13\", \"165/70R13\", \"175/70R13\", \"185/70R13\", \"165/70R14\", \"175/70R14\", \"185/70R14\", \"195/70R14\", \"205/70R14\", \"195/70R15\", \"205/70R15\", \"215/70R15\", \"225/70R15\", \"235/70R15\", \"255/70R15\", \"265/70R15\"\r",
											"];\r",
											"pm.environment.set(\"marking\", markingList[Math.floor(Math.random() * (markingList.length))]);\r",
											"var predestinationList = [\"truck\", \"spectech\", \"regular\"];\r",
											"pm.environment.set(\"predestination\", predestinationList[Math.floor(Math.random() * (predestinationList.length))]);\r",
											"pm.environment.set(\"year\", Math.ceil(Math.random() * 20 + 2001));\r",
											"var wheelSeasonList = [\"allseason\", \"summer\", \"winter\", \"AT\", \"MT\"];\r",
											"pm.environment.set(\"wheelSeason\", wheelSeasonList[Math.floor(Math.random() * (wheelSeasonList.length))]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}",
											"type": "text"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"bulletin\",\"fields\":{\"text\":\"Продам шины на какую-то машину\",\"price\":[#$(,+@,\"RUB\"],\"inSetQuantity\":\"{{inSetQuantity}}\",\"quantity\":{{quantity}},\"model\":[\"{{model}}\"],\"marking\":\"{{marking}}\",\"predestination\":\"{{predestination}}\",\"condition\":\"new\",\"wheelTireWear\":\"До 5\",\"year\":\"{{year}}\",\"runFlat\":false,\"wheelSeason\":\"{{wheelSeason}}\",\"goodPresentState\":\"present\"},\"directoryId\":234,\"id\":{{ID}}}",
											"type": "text"
										},
										{
											"key": "client_type",
											"value": "v2:adding",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Publication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"The announcement has not been published. It's expected\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"Мы бесплатно опубликовали объявление. Предложение появится на сайте в течение нескольких минут\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Объявление содержит ошибки\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/{{ID}}/draft/publish?from=draft.publish",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"{{ID}}",
										"draft",
										"publish"
									],
									"query": [
										{
											"key": "from",
											"value": "draft.publish"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Taking uid for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const $ = cheerio.load(responseBody);\r",
											"const $form = $('input[name=uid]');\r",
											"const uid = $form.attr('value');\r",
											"pm.environment.set(\"uid\", uid);\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-configure?ids={{ID}}&applier=deleteBulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-configure"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ID}}"
										},
										{
											"key": "applier",
											"value": "deleteBulletin"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Deleting announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "applier",
											"value": "deleteBulletin"
										},
										{
											"key": "bulletin[{{ID}}]",
											"value": "on"
										},
										{
											"key": "order_id",
											"value": "0"
										},
										{
											"key": "price",
											"value": "0"
										},
										{
											"key": "return_to",
											"value": "https://baza.drom.ru/personal/actual/bulletins"
										},
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-apply",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-apply"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC010. Price = string",
					"item": [
						{
							"name": "[C]Adding new announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.clear();\r",
											"var JSONData = pm.response.json();\r",
											"pm.environment.set(\"ID\", JSONData.id)\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"\",\"fields\":{\"subject\":\"Продам шины\",\"dirId\":234},\"directoryId\":234}"
										},
										{
											"key": "client_type",
											"value": "v2:adding"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Creating fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present and correct\", function () {\r",
											"    let priceCantContainsLetters = \"Цена не может содержать буквы\";\r",
											"    let JSONData = pm.response.json();\r",
											"    let key = Object.keys(JSONData[\"fields\"][1])[12];\r",
											"    let errorValue = JSONData[\"fields\"][1][\"error\"][0];\r",
											"    pm.expect(key).to.eql(\"error\");\r",
											"    pm.expect(errorValue).to.eql(priceCantContainsLetters);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"inSetQuantity\", Math.ceil(Math.random() * 8));\r",
											"pm.environment.set(\"quantity\", Math.ceil(Math.random() * 10));\r",
											"var modelList = [\r",
											"    \"Aichi\", \"Aim-One\", \"Altura\", \"Arcron\", \"Aresrook\", \"Arisun\", \"Armstrong\", \"Assa\", \"Athos\", \"Aushine\", \"Bandvulk\", \"Benchmark\", \"Black Rocket\", \"Bob Jane\", \"Bobcat\", \"Bolex\", \"Broadway\", \"Bull\", \"ChaoYang\"\r",
											"];\r",
											"pm.environment.set(\"model\", modelList[Math.floor(Math.random() * (modelList.length))]);\r",
											"var markingList = [\r",
											"    \"145/70R12\", \"155/70R12\", \"165/70R12\", \"175/70R12\", \"145/70R13\", \"155/70R13\", \"165/70R13\", \"175/70R13\", \"185/70R13\", \"165/70R14\", \"175/70R14\", \"185/70R14\", \"195/70R14\", \"205/70R14\", \"195/70R15\", \"205/70R15\", \"215/70R15\", \"225/70R15\", \"235/70R15\", \"255/70R15\", \"265/70R15\"\r",
											"];\r",
											"pm.environment.set(\"marking\", markingList[Math.floor(Math.random() * (markingList.length))]);\r",
											"var predestinationList = [\"truck\", \"spectech\", \"regular\"];\r",
											"pm.environment.set(\"predestination\", predestinationList[Math.floor(Math.random() * (predestinationList.length))]);\r",
											"pm.environment.set(\"year\", Math.ceil(Math.random() * 20 + 2001));\r",
											"var wheelSeasonList = [\"allseason\", \"summer\", \"winter\", \"AT\", \"MT\"];\r",
											"pm.environment.set(\"wheelSeason\", wheelSeasonList[Math.floor(Math.random() * (wheelSeasonList.length))]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}",
											"type": "text"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"bulletin\",\"fields\":{\"text\":\"Продам шины на какую-то машину\",\"price\":[\"abc\",\"RUB\"],\"inSetQuantity\":\"{{inSetQuantity}}\",\"quantity\":{{quantity}},\"model\":[\"{{model}}\"],\"marking\":\"{{marking}}\",\"predestination\":\"{{predestination}}\",\"condition\":\"new\",\"wheelTireWear\":\"До 5\",\"year\":\"{{year}}\",\"runFlat\":false,\"wheelSeason\":\"{{wheelSeason}}\",\"goodPresentState\":\"present\"},\"directoryId\":234,\"id\":{{ID}}}",
											"type": "text"
										},
										{
											"key": "client_type",
											"value": "v2:adding",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Publication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"The announcement has not been published. It's expected\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"Мы бесплатно опубликовали объявление. Предложение появится на сайте в течение нескольких минут\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Объявление содержит ошибки\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/{{ID}}/draft/publish?from=draft.publish",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"{{ID}}",
										"draft",
										"publish"
									],
									"query": [
										{
											"key": "from",
											"value": "draft.publish"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R]Announcement  price error check",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Ошибка в поле \"Цена\"');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://baza.drom.ru/novosibirsk/wheel/tire/prodam-shiny-{{ID}}.html",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"novosibirsk",
										"wheel",
										"tire",
										"prodam-shiny-{{ID}}.html"
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Taking uid for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const $ = cheerio.load(responseBody);\r",
											"const $form = $('input[name=uid]');\r",
											"const uid = $form.attr('value');\r",
											"pm.environment.set(\"uid\", uid);\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-configure?ids={{ID}}&applier=deleteBulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-configure"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ID}}"
										},
										{
											"key": "applier",
											"value": "deleteBulletin"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Deleting announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "applier",
											"value": "deleteBulletin"
										},
										{
											"key": "bulletin[{{ID}}]",
											"value": "on"
										},
										{
											"key": "order_id",
											"value": "0"
										},
										{
											"key": "price",
											"value": "0"
										},
										{
											"key": "return_to",
											"value": "https://baza.drom.ru/personal/actual/bulletins"
										},
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-apply",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-apply"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC011. Price = int64",
					"item": [
						{
							"name": "[C]Adding new announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.clear();\r",
											"var JSONData = pm.response.json();\r",
											"pm.environment.set(\"ID\", JSONData.id)\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains ID\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"\",\"fields\":{\"subject\":\"Продам шины\",\"dirId\":234},\"directoryId\":234}"
										},
										{
											"key": "client_type",
											"value": "v2:adding"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Creating fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=UTF-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present and correct\", function () {\r",
											"    let priceTooBig = \"Слишком большое значение цены\";\r",
											"    let JSONData = pm.response.json();\r",
											"    let key = Object.keys(JSONData[\"fields\"][1])[12];\r",
											"    let errorValue = JSONData[\"fields\"][1][\"error\"][0];\r",
											"    pm.expect(key).to.eql(\"error\");\r",
											"    pm.expect(errorValue).to.eql(priceTooBig);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"inSetQuantity\", Math.ceil(Math.random() * 8));\r",
											"pm.environment.set(\"quantity\", Math.ceil(Math.random() * 10));\r",
											"var modelList = [\r",
											"    \"Aichi\", \"Aim-One\", \"Altura\", \"Arcron\", \"Aresrook\", \"Arisun\", \"Armstrong\", \"Assa\", \"Athos\", \"Aushine\", \"Bandvulk\", \"Benchmark\", \"Black Rocket\", \"Bob Jane\", \"Bobcat\", \"Bolex\", \"Broadway\", \"Bull\", \"ChaoYang\"\r",
											"];\r",
											"pm.environment.set(\"model\", modelList[Math.floor(Math.random() * (modelList.length))]);\r",
											"var markingList = [\r",
											"    \"145/70R12\", \"155/70R12\", \"165/70R12\", \"175/70R12\", \"145/70R13\", \"155/70R13\", \"165/70R13\", \"175/70R13\", \"185/70R13\", \"165/70R14\", \"175/70R14\", \"185/70R14\", \"195/70R14\", \"205/70R14\", \"195/70R15\", \"205/70R15\", \"215/70R15\", \"225/70R15\", \"235/70R15\", \"255/70R15\", \"265/70R15\"\r",
											"];\r",
											"pm.environment.set(\"marking\", markingList[Math.floor(Math.random() * (markingList.length))]);\r",
											"var predestinationList = [\"truck\", \"spectech\", \"regular\"];\r",
											"pm.environment.set(\"predestination\", predestinationList[Math.floor(Math.random() * (predestinationList.length))]);\r",
											"pm.environment.set(\"year\", Math.ceil(Math.random() * 20 + 2001));\r",
											"var wheelSeasonList = [\"allseason\", \"summer\", \"winter\", \"AT\", \"MT\"];\r",
											"pm.environment.set(\"wheelSeason\", wheelSeasonList[Math.floor(Math.random() * (wheelSeasonList.length))]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									},
									{
										"key": "X-Utf-Fields",
										"value": "changeDescription,APIOptions,client_type"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "APIOptions",
											"value": "{\"fieldSetVariation\":\"full_set\",\"canUsePersistentSettings\":true}",
											"type": "text"
										},
										{
											"key": "changeDescription",
											"value": "{\"addingType\":\"bulletin\",\"fields\":{\"text\":\"Продам шины на какую-то машину\",\"price\":[9223372036854775807,\"RUB\"],\"inSetQuantity\":\"{{inSetQuantity}}\",\"quantity\":{{quantity}},\"model\":[\"{{model}}\"],\"marking\":\"{{marking}}\",\"predestination\":\"{{predestination}}\",\"condition\":\"new\",\"wheelTireWear\":\"До 5\",\"year\":\"{{year}}\",\"runFlat\":false,\"wheelSeason\":\"{{wheelSeason}}\",\"goodPresentState\":\"present\"},\"directoryId\":234,\"id\":{{ID}}}",
											"type": "text"
										},
										{
											"key": "client_type",
											"value": "v2:adding",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/api/1.0/save/bulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"api",
										"1.0",
										"save",
										"bulletin"
									]
								}
							},
							"response": []
						},
						{
							"name": "[C]Publication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"The announcement has not been published. It's expected\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"Мы бесплатно опубликовали объявление. Предложение появится на сайте в течение нескольких минут\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Объявление содержит ошибки\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/{{ID}}/draft/publish?from=draft.publish",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"{{ID}}",
										"draft",
										"publish"
									],
									"query": [
										{
											"key": "from",
											"value": "draft.publish"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R]Announcement  price error check",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price error is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Ошибка в поле \"Цена\"');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://baza.drom.ru/novosibirsk/wheel/tire/prodam-shiny-{{ID}}.html",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"novosibirsk",
										"wheel",
										"tire",
										"prodam-shiny-{{ID}}.html"
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Taking uid for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const $ = cheerio.load(responseBody);\r",
											"const $form = $('input[name=uid]');\r",
											"const uid = $form.attr('value');\r",
											"pm.environment.set(\"uid\", uid);\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains uid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"uid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-configure?ids={{ID}}&applier=deleteBulletin",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-configure"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ID}}"
										},
										{
											"key": "applier",
											"value": "deleteBulletin"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[D]Deleting announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code === 200) {\r",
											"    tests [\"Backend is available, response code is 200\"] = true;\r",
											"} else if (responseCode.code === 400) {\r",
											"    tests [\"Bad request, check response body\"] = false;\r",
											"} else if (responseCode.code === 401) {\r",
											"    tests [\"Not authorized, check access token or Log in\"] = false;\r",
											"} else if (responseCode.code === 403) {\r",
											"    tests [\"Forbidden\"] = false;\r",
											"} else if (responseCode.code === 404) {\r",
											"    tests [\"Not found. Check if you made correct request\"] = false;\r",
											"} else if (responseCode.code === 409) {\r",
											"    tests [\"Conflict error\"] = false;\r",
											"} else {\r",
											"    tests [`There are no ${responseCode.code} error in the test. Need to add it`] = false;\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is less than 1kb\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test(\"Header is correct\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"nginx\");\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=windows-1251\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"Keep-Alive\", \"timeout=120\");\r",
											"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Cookie",
										"value": "{{Cookies}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "applier",
											"value": "deleteBulletin"
										},
										{
											"key": "bulletin[{{ID}}]",
											"value": "on"
										},
										{
											"key": "order_id",
											"value": "0"
										},
										{
											"key": "price",
											"value": "0"
										},
										{
											"key": "return_to",
											"value": "https://baza.drom.ru/personal/actual/bulletins"
										},
										{
											"key": "uid",
											"value": "{{uid}}"
										}
									]
								},
								"url": {
									"raw": "https://baza.drom.ru/bulletin/service-apply",
									"protocol": "https",
									"host": [
										"baza",
										"drom",
										"ru"
									],
									"path": [
										"bulletin",
										"service-apply"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}